package com.mycro.micro.camera;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.*;
import android.hardware.camera2.*;
import android.hardware.camera2.params.MeteringRectangle;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.Log;
import android.util.Range;
import android.util.Size;
import android.util.SparseIntArray;
import android.view.*;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.mycro.micro.R;
import com.mycro.micro.View.FocusSunView;
import com.mycro.micro.abs.AbsFragment;
import com.mycro.micro.adapter.StyleAdapter;
import com.mycro.micro.bean.StyleBean;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.*;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;


@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
public class Camera2Basic extends AbsFragment implements View.OnClickListener, ActivityCompat.OnRequestPermissionsResultCallback {
    /**
     * Conversion from screen rotation to JPEG orientation.
     */
    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
    private static final int REQUEST_CAMERA_PERMISSION = 1;
    private static final String FRAGMENT_DIALOG = "dialog";


    private static final String TAG = "Camera2Basic";
    private CameraManager mCameraManager; // 相机管理者
    private String mCameraId = Integer.toString(CameraCharacteristics.LENS_FACING_FRONT); // 默认开启后置摄像头
    private AutoFitTextureView mTextureView; // for camera preview
    private CameraCaptureSession mCaptureSession;
    private CameraDevice mCameraDevice;
    private Size mPreviewSize; // 预览大小
    private boolean mFlashSupported;
    private int mSensorOrientation; // Orientation of the camera sensor
    private CaptureRequest.Builder mPreviewRequestBuilder; // 相机预览请求的构造器
    private CaptureRequest mPreviewRequest;// generated by mPreviewRequestBuilder

    private HandlerThread mBackgroundThread;
    private Handler mBackgroundHandler;
    private ImageReader mImageReader;
    private File mFile; // the output file for our picture

    //5.16
    private FocusSunView focusSunView;
    private CameraCharacteristics mCameraCharacteristics;  //多摄下会不会有问题
    private int rotation = 0;

    private FrameLayout mControlLayout;

    /**
     * 如果禁用自动曝光，除了灵敏度外，还需要设置曝光时间。最好还是需要设置帧的持续时间，尽管两者的默认值可能是1/30s
     */
    //手动AE
    private Range<Integer> isoRange;
    private Range<Long> expTimeRange;
    private int mIsoValue; //iso
    private Long mExpTimeValue = 1 / 30L; // 曝光时间,先给个默认值

    float y1;
    float y2;

    private ViewStub styleStub;
    private RecyclerView styleRecyclerView;
    private List<StyleBean> mStyleBeanList;
    private StyleAdapter mStyleAdapter;

    private static final int FLASH_STATE_CLOSE = 0;
    private static final int FLASH_STATE_OPEN = 1;
    private static final int FLASH_STATE_AUTO = 2;
    private static final int FLASH_STATE_ALWAYS_LIGHT = 3;

    //闪光灯相关控件
    private ImageView mSwitchFlash;
    private ViewStub mFlashStub;
    private int mFlashId = FLASH_STATE_CLOSE; //闪光灯类型
    private LinearLayout layoutFlash;//闪光灯工具栏
    private Button mAutoFlashButton;//自动闪按钮
    private Button mOpenFlashButton;//打开闪按钮
    private Button mAlwaysFlashButton;//常亮按钮
    private Button mCloseFlashButton;//关闭按钮


    /**
     * Camera state: Showing camera preview.
     */
    private static final int STATE_PREVIEW = 0;

    /**
     * Camera state: Waiting for the focus to be locked.
     */
    private static final int STATE_WAITING_LOCK = 1;

    /**
     * Camera state: Waiting for the exposure to be precapture state.
     */
    private static final int STATE_WAITING_PRECAPTURE = 2;

    /**
     * Camera state: Waiting for the exposure state to be something other than precapture.
     */
    private static final int STATE_WAITING_NON_PRECAPTURE = 3;

    /**
     * Camera state: Picture was taken.
     */
    private static final int STATE_PICTURE_TAKEN = 4;

    /**
     * Max preview width that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_WIDTH = 1920;

    /**
     * Max preview height that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_HEIGHT = 1080;

    //前后摄像的角度旋转不一样，因此在切换后需要对ORIENTATION更新，前置旋转270，后置90
    //前置拍摄时，照片旋转270
    private static void frontOrientation() {
        //前置时，照片旋转270
        ORIENTATIONS.append(Surface.ROTATION_0, 270);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 90);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    private static void backOrientation() {
        ORIENTATIONS.append(Surface.ROTATION_0, 90);
        ORIENTATIONS.append(Surface.ROTATION_90, 0);
        ORIENTATIONS.append(Surface.ROTATION_180, 270);
        ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    public boolean isFrontCamera() {
        return mCameraId.equals(Integer.toString(CameraCharacteristics.LENS_FACING_BACK));
    }

    private LinearLayout toolbar;//预览画面距离顶部的Layout


    /**
     * {@link TextureView.SurfaceTextureListener} handles several lifecycle events on a
     * {@link TextureView}.
     */
    private final TextureView.SurfaceTextureListener mSurfaceTextureListener
            = new TextureView.SurfaceTextureListener() {

        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture texture, int width, int height) {
            openCamera(width, height);//SurfaceTexture有效即可openCamera,宽高是控件宽高
        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture texture, int width, int height) {
            configureTransform(width, height);//配置transformation，主要是矩阵旋转相关
        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture texture) {
            return true;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture texture) {
        }

    };


    /**
     * 打开摄像头的回调
     */
    @SuppressLint("NewApi")
    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

        @Override
        public void onOpened(@NonNull CameraDevice cameraDevice) {
            // This method is called when the camera is opened.  We start camera preview here.
            mCameraOpenCloseLock.release();
            mCameraDevice = cameraDevice;
            createCameraPreviewSession();
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int error) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
            Activity activity = getActivity();
            if (null != activity) {
                activity.finish();
            }
        }
    };


    /**
     * This a callback object for the {@link ImageReader}. "onImageAvailable" will be called when a
     * still image is ready to be saved.
     */
    @SuppressLint("NewApi")
    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener
            = new ImageReader.OnImageAvailableListener() {


        @Override
        public void onImageAvailable(ImageReader reader) {
            mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), mFile));
        }

    };

    /**
     * The current state of camera state for taking pictures.
     *
     * @see #mCaptureCallback
     */
    private int mState = STATE_PREVIEW;

    /**
     * A {@link Semaphore} to prevent the app from exiting before closing the camera.
     */
    private Semaphore mCameraOpenCloseLock = new Semaphore(1);

    /**
     * A {@link CameraCaptureSession.CaptureCallback} that handles events related to JPEG capture.
     */
    @SuppressLint("NewApi")
    private CameraCaptureSession.CaptureCallback mCaptureCallback
            = new CameraCaptureSession.CaptureCallback() {

        private void process(CaptureResult result) {
            switch (mState) {
                case STATE_PREVIEW: {//预览回调
                    // We have nothing to do when the camera preview is working normally.
                    break;
                }
                // 在CaptureCallback的process()中，状态切换为STATE_WAITING_LOCK，进行拍照，
                // 当然不一定就是该状态下进行拍照，还要对AE，AF的状态进行判断，最后不管哪个状态下，都会调用captureStillPicture()进行拍照。
                case STATE_WAITING_LOCK: {//等待焦点被锁时，由设置拍照流时设置的STATE_WAITING_LOCK
                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);
                    if (afState == null) {
                        captureStillPicture();//进行拍照
                    } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||
                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {
                        // CONTROL_AE_STATE can be null on some devices
                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                        if (aeState == null ||
                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {
                            mState = STATE_PICTURE_TAKEN;
                            captureStillPicture();
                        } else {
                            runPrecaptureSequence();
                        }
                    }
                    break;
                }
                case STATE_WAITING_PRECAPTURE: {
                    // CONTROL_AE_STATE can be null on some devices
                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                    if (aeState == null ||
                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||
                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {
                        mState = STATE_WAITING_NON_PRECAPTURE;
                    }
                    break;
                }
                case STATE_WAITING_NON_PRECAPTURE: {
                    // CONTROL_AE_STATE can be null on some devices
                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {
                        mState = STATE_PICTURE_TAKEN;
                        captureStillPicture();
                    }
                    break;
                }
            }
        }

        @Override
        public void onCaptureProgressed(@NonNull CameraCaptureSession session,
                                        @NonNull CaptureRequest request,
                                        @NonNull CaptureResult partialResult) {
            process(partialResult);
        }

        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                       @NonNull CaptureRequest request,
                                       @NonNull TotalCaptureResult result) {
            process(result);
        }

    };


    /**
     * Given {@code choices} of {@code Size}s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as the
     * respective max size, and whose aspect ratio matches with the specified value. If such size
     * doesn't exist, choose the largest one that is at most as large as the respective max size,
     * and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended output
     *                          class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal {@code Size}, or an arbitrary one if none were big enough
     */
    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    private static Size chooseOptimalSize(Size[] choices, int textureViewWidth,
                                          int textureViewHeight, int maxWidth, int maxHeight, Size aspectRatio) {

        // Collect the supported resolutions that are at least as big as the preview Surface
        List<Size> bigEnough = new ArrayList<>();
        // Collect the supported resolutions that are smaller than the preview Surface
        List<Size> notBigEnough = new ArrayList<>();
        int w = aspectRatio.getWidth();
        int h = aspectRatio.getHeight();
        for (Size option : choices) {
            if (option.getWidth() <= maxWidth && option.getHeight() <= maxHeight &&
                    option.getHeight() == option.getWidth() * h / w) {
                if (option.getWidth() >= textureViewWidth &&
                        option.getHeight() >= textureViewHeight) {
                    bigEnough.add(option);
                } else {
                    notBigEnough.add(option);
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        if (bigEnough.size() > 0) {
            return Collections.min(bigEnough, new CompareSizesByArea());
        } else if (notBigEnough.size() > 0) {
            return Collections.max(notBigEnough, new CompareSizesByArea());
        } else {
            Log.e(TAG, "Couldn't find any suitable preview size");
            return choices[0];
        }
    }

    public static Camera2Basic newInstance() {
        return new Camera2Basic();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_camera2_basic, container, false);
    }

    @Override
    public void onViewCreated(final View view, Bundle savedInstanceState) {
        view.findViewById(R.id.btn_switch_camera).setOnClickListener(this);
        view.findViewById(R.id.picture).setOnClickListener(this);
        view.findViewById(R.id.info).setOnClickListener(this);
        view.findViewById(R.id.btn_style).setOnClickListener(this);
        view.findViewById(R.id.toolbar_flash).setOnClickListener(this);

        mTextureView = (AutoFitTextureView) view.findViewById(R.id.texture);//获取mTextureView
        mControlLayout = (FrameLayout) view.findViewById(R.id.control);
        styleStub = view.findViewById(R.id.style_list);
        mFlashStub = view.findViewById(R.id.flash_stub);

        OnTouchListenerTest listener = new OnTouchListenerTest();
        mTextureView.setOnTouchListener(listener);

        mSwitchFlash = view.findViewById(R.id.toolbar_flash);

        focusSunView = (FocusSunView) view.findViewById(R.id.focusView);
        focusSunView.setOnExposureChangeListener(new FocusSunView.OnExposureChangeListener() {
            @Override
            public void onExposureChangeListener(float exposure) {
                Log.e(TAG, "FocusSunView onExposureChangeListener: -----------> exposure:" + exposure);
                //TODO 曝光调整
                //条杆速度过快，弦月没出来，对焦框会缩放没弄懂
                setIsoChange((int) exposure);
            }
        });

        //闪光灯属于常用功能，没必要等到点击后在初始化
        mFlashStub.setOnInflateListener(new ViewStub.OnInflateListener() {
            @Override
            public void onInflate(ViewStub stub, View inflated) {
                mCloseFlashButton = inflated.findViewById(R.id.btn_close_flash);
                mOpenFlashButton = inflated.findViewById(R.id.btn_open_flash);
                mAutoFlashButton = inflated.findViewById(R.id.btn_auto_flash);
                mAlwaysFlashButton = inflated.findViewById(R.id.btn_always_flash);

                //setOnClickListener(this)不再适用，用外部类来实现点击事件
                mCloseFlashButton.setOnClickListener(new mFlashClick());
                mOpenFlashButton.setOnClickListener(new mFlashClick());
                mAutoFlashButton.setOnClickListener(new mFlashClick());
                mAlwaysFlashButton.setOnClickListener(new mFlashClick());
            }
        });

        //做个延迟加载,优化进入速度
        mFlashStub.post(new Runnable() {
            @Override
            public void run() {
                //这个获取很重要，不然会空指针
                layoutFlash = mFlashStub.inflate().findViewById(R.id.layout_Flash);
            }
        });

    }

    private void initAdapter() {
        mStyleAdapter = new StyleAdapter(getActivity(), mStyleBeanList);
        styleRecyclerView.setAdapter(mStyleAdapter);

        //线性布局管理器,水平方向
        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);
        //指定布局的样式
        styleRecyclerView.setLayoutManager(layoutManager);
    }

    //粗糙，仅仅前期用来先暂时生成数据,仅作测试，后期删除
    private void initData() {
        mStyleBeanList = new ArrayList<>();

        for (int i = 0; i < 8; i++) {
            StyleBean styleBean = new StyleBean();
            styleBean.setStyleName("风格" + i);
            styleBean.setImageResourceId(R.drawable.filter_thumb_original);
            mStyleBeanList.add(styleBean);
        }

    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mFile = new File(getActivity().getExternalFilesDir(null), "pic.jpg");
    }

    @Override
    public void onResume() {
        super.onResume();
        startBackgroundThread();//为相机开启了一个后台线程，这个进程用于后台执行相关的工作

        // 判断TextureView是否有效，有效就直接openCamera()，
        // 无效就加入一个监听SufaceTextureListener，通过回调确保surfaceTexture有效，然后同样openCamera()
        if (mTextureView.isAvailable()) {
            openCamera(mTextureView.getWidth(), mTextureView.getHeight());
        } else {
            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        }
    }

    @Override
    public void onPause() {
        closeCamera();
        stopBackgroundThread();
        super.onPause();
    }

    //5.16 写个监听接口
    class OnTouchListenerTest implements View.OnTouchListener {
        @Override
        public boolean onTouch(View v, MotionEvent event) {
            if (event.getPointerCount() == 1) {
                // 点击聚焦
                // TODO 业务应该放在预览的View里
                getFocusRect((int) event.getX(), (int) event.getY(), mTextureView.getWidth(), mTextureView.getHeight());
            }
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN: {
                    //当手指按下的时候
                    //float x1 = event.getX();
                    y1 = event.getY();
                    focusSunView.setVisibility(View.VISIBLE);
                    focusSunView.setTranslationX(event.getX() - (focusSunView.getWidth() / 2f));
                    focusSunView.setTranslationY(event.getY() - (focusSunView.getHeight() / 2f));
                    focusSunView.startCountdown(true); //默认
                    break;
                }
                case MotionEvent.ACTION_MOVE:
                    //当手指移动的时候
                    //float x2 = event.getX();
                    y2 = event.getY();
                    break;

            }
            return true;
        }
    }


    private void requestCameraPermission() {
        if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {
            new ConfirmationDialog().show(getChildFragmentManager(), FRAGMENT_DIALOG);
        } else {
            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        if (requestCode == REQUEST_CAMERA_PERMISSION) {
            if (grantResults.length != 1 || grantResults[0] != PackageManager.PERMISSION_GRANTED) {
                ErrorDialog.newInstance(getString(R.string.request_permission))
                        .show(getChildFragmentManager(), FRAGMENT_DIALOG);
            }
        } else {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }

    /**
     * 设置相机特性--setUpCameraOutputs()，设置图片存储监听OnImageAvaliableListener，拍照图片有效会通知ImageSaver线程保存图片，设置AE，AF等
     * 包括对相机设备的选择，ImageReader的初始化和参数、回调设置。设置显示的转化矩阵，即将预览的图片调整至显示图层的大小。
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */
    @SuppressWarnings("SuspiciousNameCombination")
    private void setUpCameraOutputs(int width, int height) {
        Activity activity = getActivity();
        mCameraManager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
        try {
            mCameraCharacteristics = mCameraManager.getCameraCharacteristics(mCameraId);//获取相机的特性

            //相机设备支持的敏感度范围，用于 android.sensor.sensitivity
            isoRange = mCameraCharacteristics.get(
                    CameraCharacteristics.SENSOR_INFO_SENSITIVITY_RANGE);
            //相机设备支持的图片曝光时间范围，用于 android.sensor.exposureTime
            expTimeRange = mCameraCharacteristics.get(
                    CameraCharacteristics.SENSOR_INFO_EXPOSURE_TIME_RANGE);
            if (isoRange != null && expTimeRange != null) {
                mIsoValue = isoRange.getLower();
                mExpTimeValue = expTimeRange.getLower();
            }

            StreamConfigurationMap map = mCameraCharacteristics.get(
                    CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);

            // For still image captures, we use the largest available size.
            Size largest = Collections.max(
                    Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),
                    new CompareSizesByArea());
            //设置ImageReader接收的图片格式，以及允许接收的最大图片数目
            mImageReader = ImageReader.newInstance(largest.getWidth(), largest.getHeight(),
                    ImageFormat.JPEG, /*maxImages*/2);
            mImageReader.setOnImageAvailableListener(
                    mOnImageAvailableListener, mBackgroundHandler);

            // Find out if we need to swap dimension to get the preview size relative to sensor
            // coordinate.
            int displayRotation = activity.getWindowManager().getDefaultDisplay().getRotation();
            //noinspection ConstantConditions
            mSensorOrientation = mCameraCharacteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
            boolean swappedDimensions = false;
            switch (displayRotation) {
                case Surface.ROTATION_0:
                case Surface.ROTATION_180:
                    if (mSensorOrientation == 90 || mSensorOrientation == 270) {
                        swappedDimensions = true;
                    }
                    break;
                case Surface.ROTATION_90:
                case Surface.ROTATION_270:
                    if (mSensorOrientation == 0 || mSensorOrientation == 180) {
                        swappedDimensions = true;
                    }
                    break;
                default:
                    Log.e(TAG, "Display rotation is invalid: " + displayRotation);
            }

            Point displaySize = new Point();
            activity.getWindowManager().getDefaultDisplay().getSize(displaySize);
            int rotatedPreviewWidth = width;
            int rotatedPreviewHeight = height;
            int maxPreviewWidth = displaySize.x;
            int maxPreviewHeight = displaySize.y;

            if (swappedDimensions) {//横竖屏交换尺寸
                rotatedPreviewWidth = height;
                rotatedPreviewHeight = width;
                maxPreviewWidth = displaySize.y;
                maxPreviewHeight = displaySize.x;
            }

            if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
                maxPreviewWidth = MAX_PREVIEW_WIDTH;
            }

            if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
                maxPreviewHeight = MAX_PREVIEW_HEIGHT;
            }

            // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
            // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
            // garbage capture data.
            //获取最优的预览分辨率
            mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                    rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                    maxPreviewHeight, largest);

            // We fit the aspect ratio of TextureView to the size of preview we picked.
            int orientation = getResources().getConfiguration().orientation;
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                //设置TextureView预览分辨率
                mTextureView.setAspectRatio(
                        mPreviewSize.getWidth(), mPreviewSize.getHeight());
            } else {
                mTextureView.setAspectRatio(
                        mPreviewSize.getHeight(), mPreviewSize.getWidth());
            }

            // Check if the flash is supported.
            Boolean available = mCameraCharacteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
            mFlashSupported = available == null ? false : available;
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
            ErrorDialog.newInstance(getString(R.string.camera_error))
                    .show(getChildFragmentManager(), FRAGMENT_DIALOG);
        }
    }

    /**
     * Opens the camera specified by {@link Camera2Basic#mCameraId}.
     */
    private void openCamera(int width, int height) {
        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
            requestCameraPermission();
            return;
        }
        setUpCameraOutputs(width, height);
        configureTransform(width, height);
        try {
            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw new RuntimeException("Time out waiting to lock camera opening.");
            }
            //获取CameraManager对象，然后真正打开相机
            //manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);
            //其中mStateCallBack是相机状态回调。
            mCameraManager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera opening.", e);
        }
    }


    /**
     * swtich camera
     * 对当前相机id进行判断和改变，依旧要利用cameraManager.getCameraCharacteristics获取信息提供，cameraid做成全局变量了，在进入相机是会初始化
     * 切换的逻辑是判断当前的前后置状态，然后改变cameraID变成相反的，再重新打开相机（脑子卡壳了，才想出来）
     */
    public void switchCamera() {
        //存储可以使用的Stream Configurations（流配置信息）
        //StreamConfigurationMap map = mCameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
        Log.d(TAG, "switchCamera: mCameraId: " + mCameraId);
        if (mCameraId.equals(String.valueOf(CameraCharacteristics.LENS_FACING_BACK))) {
            mCameraId = String.valueOf(CameraCharacteristics.LENS_FACING_FRONT);
            mCameraDevice.close();
            backOrientation();
            openCamera(mTextureView.getWidth(), mTextureView.getHeight());

        } else if (mCameraId.equals(String.valueOf(CameraCharacteristics.LENS_FACING_FRONT))) {
            mCameraId = String.valueOf(CameraCharacteristics.LENS_FACING_BACK);
            mCameraDevice.close();
            frontOrientation();
            openCamera(mTextureView.getWidth(), mTextureView.getHeight());
        }
    }

    /**
     * Closes the current {@link CameraDevice}.
     */
    private void closeCamera() {
        try {
            mCameraOpenCloseLock.acquire();
            if (null != mCaptureSession) {
                mCaptureSession.close();
                mCaptureSession = null;
            }
            if (null != mCameraDevice) {
                mCameraDevice.close();
                mCameraDevice = null;
            }
            if (null != mImageReader) {
                mImageReader.close();
                mImageReader = null;
            }
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera closing.", e);
        } finally {
            mCameraOpenCloseLock.release();
        }
    }

    /**
     * 开启一个后台线程处理相机数据
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread("CameraBackground");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * 打开相机成功的话，获取CameraDevice，然后创建会话--createCameraPreviewSession()，
     * 通过mTextureView获取SurfaceTexture，通过SurafceTexture获得Surface对象，在CaptureRequest.Builder中添加Surface
     * 然后创建会话，获得CaptureRequest对象，通过CaptureRequest发送重复请求捕捉画面，开启预览。
     */
    private void createCameraPreviewSession() {
        try {
            //通过mTextureView获取SurfaceTexture,创建并确定一块SurfaceTexture用来预览数据
            SurfaceTexture texture = mTextureView.getSurfaceTexture();
            assert texture != null;

            // We configure the size of default buffer to be the size of camera preview we want.
            // 设置SurfaceTexture大小,预览尺寸
            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

            // //通过SurfaceTexture创建Surface来预览
            Surface surface = new Surface(texture);

            // We set up a CaptureRequest.Builder with the output Surface.
            //通过 CameraDevice 对象的 createCaptureRequest() 方法得到一个 CaptureRequest.Builder 实例，再用set()进行各种配置。
            mPreviewRequestBuilder
                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            mPreviewRequestBuilder.addTarget(surface);

            // Here, we create a CameraCaptureSession for camera preview.
            // 创建会话
            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),
                    new CameraCaptureSession.StateCallback() {

                        @Override
                        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                            // The camera is already closed
                            if (null == mCameraDevice) {
                                return;
                            }

                            // When the session is ready, we start displaying the preview.
                            mCaptureSession = cameraCaptureSession;
                            try {
                                // Auto focus should be continuous for camera preview.
                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                                // Flash is automatically enabled when necessary.
                                setFlash(mPreviewRequestBuilder);

                                // Finally, we start displaying the camera preview.
                                mPreviewRequest = mPreviewRequestBuilder.build();
                                mCaptureSession.setRepeatingRequest(mPreviewRequest, mCaptureCallback, mBackgroundHandler);
                            } catch (CameraAccessException e) {
                                e.printStackTrace();
                            }
                        }

                        @Override
                        public void onConfigureFailed(
                                @NonNull CameraCaptureSession cameraCaptureSession) {
                            showToast("Failed");
                        }
                    }, null
            );
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * 设置矩阵变换 configureTransform()
     *
     * @param viewWidth  The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private void configureTransform(int viewWidth, int viewHeight) {
        Activity activity = getActivity();
        if (null == mTextureView || null == mPreviewSize || null == activity) {
            return;
        }
        int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
        Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale = Math.max(
                    (float) viewHeight / mPreviewSize.getHeight(),
                    (float) viewWidth / mPreviewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180, centerX, centerY);
        }
        //向下平移一定距离，postTranslate中的dx，dy代表向右和向下平移的距离
        matrix.postTranslate(0, (mTextureView.getHeight() - mControlLayout.getHeight() - mPreviewSize.getHeight() * 1.0f) / 2);
        mTextureView.setTransform(matrix);
    }

    /**
     * Initiate a still image capture.
     * 拍照流程:首先有个入口，拍照按钮点击事件，触发takePicture(),takePicture中实现了lockFocus()锁住焦点
     */
    private void takePicture() {
        lockFocus();
    }

    /**
     * Lock the focus as the first step for a still image capture.
     * 设置了一个等待锁定的状态，发送一次请求，加入了一个回调CaptureCallback，这一步还没有进行拍照
     */
    private void lockFocus() {
        try {
            // This is how to tell the camera to lock focus.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_START);
            // Tell #mCaptureCallback to wait for the lock.
            mState = STATE_WAITING_LOCK;
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Run the precapture sequence for capturing a still image. This method should be called when
     * we get a response in {@link #mCaptureCallback} from {@link #lockFocus()}.
     */
    private void runPrecaptureSequence() {
        try {
            // This is how to tell the camera to trigger.
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,
                    CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START);
            // Tell #mCaptureCallback to wait for the precapture sequence to be set.
            mState = STATE_WAITING_PRECAPTURE;
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * captureStillPicture() 设置拍照捕捉请求，设置成像方向与预览方向一致，
     * 中断停止预览的重复请求，最终进行拍照，拍照数据会由imageSaver处理，保存到文件，
     * 然后通过CameraCaptureSession.CaptureCallback回调解除锁定，回复预览界面
     * {@link #mCaptureCallback} from both {@link #lockFocus()}.
     */
    private void captureStillPicture() {
        try {
            final Activity activity = getActivity();
            if (null == activity || null == mCameraDevice) {
                Log.d(TAG, "captureStillPicture return");
                return;
            }
            // This is the CaptureRequest.Builder that we use to take a picture.
            final CaptureRequest.Builder captureBuilder =
                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
            captureBuilder.addTarget(mImageReader.getSurface());

            // Use the same AE and AF modes as the preview.
            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
            setFlash(captureBuilder);

            // Orientation
            rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));

            CameraCaptureSession.CaptureCallback CaptureCallback
                    = new CameraCaptureSession.CaptureCallback() {

                @Override
                public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                               @NonNull CaptureRequest request,
                                               @NonNull TotalCaptureResult result) {
                    showToast("Saved: " + mFile);
                    Log.d(TAG, mFile.toString());
                    unlockFocus();
                }
            };
            mCaptureSession.stopRepeating();
            mCaptureSession.abortCaptures();
            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, null);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Retrieves the JPEG orientation from the specified screen rotation.
     *
     * @param rotation The screen rotation.
     * @return The JPEG orientation (one of 0, 90, 270, and 360)
     */
    private int getOrientation(int rotation) {
        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
        // We have to take that into account and rotate JPEG properly.
        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
        return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
    }

    /**
     * Unlock the focus. This method should be called when still image capture sequence is
     * finished.
     */
    private void unlockFocus() {
        try {
            // Reset the auto-focus trigger
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);
            setFlash(mPreviewRequestBuilder);
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,
                    mBackgroundHandler);
            // After this, the camera will go back to the normal state of preview.
            mState = STATE_PREVIEW;
            mCaptureSession.setRepeatingRequest(mPreviewRequest, mCaptureCallback,
                    mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onClick(View view) {
        Log.d(TAG, "onClick");
        int id = view.getId();
        if (id == R.id.picture) {
            Log.d(TAG, "onClick picture");
            takePicture();
        } else if (id == R.id.info) {
            Log.d(TAG, "onClick info");
            Activity activity = getActivity();
            if (null != activity) {
                new AlertDialog.Builder(activity)
                        .setMessage(R.string.intro_message)
                        .setPositiveButton(android.R.string.ok, null)
                        .show();
            }
        } else if (id == R.id.btn_style) {
            Log.d(TAG, "onClick btn_style");
            //inflate 方法只能被调用一次，因为调用后viewStub对象就被移除了视图树；
            // 所以，如果此时再次点击显示按钮，就会崩溃，错误信息：ViewStub must have a non-null ViewGroup viewParent；
            // 所以使用try catch ,当此处发现exception 的时候，在catch中使用setVisibility()重新显示
            try {
                    /*View review = styleStub.inflate();     //inflate 方法只能被调用一次，
                    styleRecyclerView = (RecyclerView) review.findViewById(R.id.style_list_recycleView);*/
                styleRecyclerView = styleStub.inflate().findViewById(R.id.style_list_recycleView);
            } catch (Exception e) {
                styleStub.setVisibility(View.VISIBLE);
            }
            initData();
            initAdapter();
        } else if (id == R.id.toolbar_flash) {
            Log.d(TAG, "onClick toolbar_flash");
            layoutFlash.setVisibility(View.VISIBLE);
        }
    }

    private void flashAction(int flashState) {
        Log.d(TAG, "flashAction flashState:" + flashState);
        if (!isFrontCamera()) {
            switch (flashState) {
                case FLASH_STATE_CLOSE:
                    if (mFlashId == FLASH_STATE_CLOSE) {
                        return;
                    }
                    mFlashId = FLASH_STATE_CLOSE;
                    mSwitchFlash.setImageResource(R.drawable.baseline_flash_off_24);
                    mCloseFlashButton.setTextColor(getResources().getColor(R.color.yellow));
                    mOpenFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mAutoFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mAlwaysFlashButton.setTextColor(getResources().getColor(R.color.white));
                    layoutFlash.setVisibility(View.GONE);
                    break;
                case FLASH_STATE_OPEN:
                    if (mFlashId == FLASH_STATE_OPEN) {
                        return;
                    }
                    mFlashId = FLASH_STATE_OPEN;
                    mSwitchFlash.setImageResource(R.drawable.baseline_flash_on_24);
                    mCloseFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mOpenFlashButton.setTextColor(getResources().getColor(R.color.yellow));
                    mAutoFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mAlwaysFlashButton.setTextColor(getResources().getColor(R.color.white));
                    layoutFlash.setVisibility(View.GONE);
                    break;
                case FLASH_STATE_AUTO:
                    if (mFlashId == FLASH_STATE_AUTO) {
                        return;
                    }
                    mFlashId = FLASH_STATE_AUTO;
                    mSwitchFlash.setImageResource(R.drawable.baseline_flash_auto_24);
                    mCloseFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mOpenFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mAutoFlashButton.setTextColor(getResources().getColor(R.color.yellow));
                    mAlwaysFlashButton.setTextColor(getResources().getColor(R.color.white));
                    layoutFlash.setVisibility(View.GONE);
                    break;
                case FLASH_STATE_ALWAYS_LIGHT:
                    if (mFlashId == FLASH_STATE_ALWAYS_LIGHT) {
                        return;
                    }
                    mFlashId = FLASH_STATE_ALWAYS_LIGHT;
                    mSwitchFlash.setImageResource(R.drawable.baseline_wb_sunny_24);
                    mCloseFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mOpenFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mAutoFlashButton.setTextColor(getResources().getColor(R.color.white));
                    mAlwaysFlashButton.setTextColor(getResources().getColor(R.color.yellow));
                    layoutFlash.setVisibility(View.GONE);
                    break;
            }
        }
    }

    /**
     * 当使用Flash Mode来控制Flash时，必须将android.control.aeMode 设置为ON 或 OFF，
     * 否则Flash Mode会被AE Mode的ON_AUTO_FLASH, ON_ALWAYS_FLASH 或 ON_AUTO_FLASH_REDEYE覆盖
     *
     * @param requestBuilder
     */
    private void setFlash(CaptureRequest.Builder requestBuilder) {
        if (mFlashSupported) {
            switch (mFlashId) {
                case FLASH_STATE_CLOSE:
                    requestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
                    requestBuilder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_OFF);
                    break;
                case FLASH_STATE_OPEN:
                    requestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_ALWAYS_FLASH);
                    requestBuilder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_SINGLE);
                    break;
                case FLASH_STATE_AUTO:
                    requestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);
                    requestBuilder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_SINGLE);
                    break;
                case FLASH_STATE_ALWAYS_LIGHT:
                    requestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON);
                    //CameraMetadata#FLASH_MODE_TORCH：手电筒模式，打开后Flash一直亮着
                    requestBuilder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);
                    break;
            }

        }
    }

    private class mFlashClick implements View.OnClickListener {

        @Override
        public void onClick(View v) {
            int id = v.getId();
            if (id == R.id.btn_close_flash) {
                flashAction(FLASH_STATE_CLOSE);
            } else if (id == R.id.btn_open_flash) {
                flashAction(FLASH_STATE_OPEN);
            } else if (id == R.id.btn_auto_flash) {
                flashAction(FLASH_STATE_AUTO);
            } else if (id == R.id.btn_always_flash) {
                flashAction(FLASH_STATE_ALWAYS_LIGHT);
            }
        }
    }

    /**
     * 获取点击区域
     *
     * @param x:手指触摸点x坐标
     * @param y:         手指触摸点y坐标
     * @param width:     getWidth()
     * @param height:    getHeight()
     */
    public void getFocusRect(double x, double y, int width, int height) {
        if (mCameraDevice == null || mPreviewRequestBuilder == null) {
            Log.d(TAG, "getFocusRect flase");
            return;
        }
        // 1.因为获取的SCALER_CROP_REGION是宽大于高的，也就是默认横屏模式，竖屏模式需要对调width和height
        // 取相对坐标
        int previewWidth = mPreviewSize.getWidth();
        int previewHeight = mPreviewSize.getHeight();
        if (rotation == 90 || rotation == 270) {
            previewWidth = mPreviewSize.getHeight();
            previewHeight = mPreviewSize.getWidth();
        }
        // 2. 计算摄像头取出的图像相对于view放大了多少，以及有多少偏移
        double tmp;
        double imgScale;
        double verticalOffset = 0;
        double horizontalOffset = 0;
        if (previewHeight * width > previewWidth * height) {
            imgScale = width * 1.0 / previewWidth;
            verticalOffset = (previewHeight - height / imgScale) / 2;
        } else {
            imgScale = height * 1.0 / previewHeight;
            horizontalOffset = (previewWidth - width / imgScale) / 2;
        }
        // 3. 将点击的坐标转换为图像上的坐标
        x = x / imgScale + horizontalOffset;
        y = y / imgScale + verticalOffset;
        if (90 == rotation) {
            tmp = x;
            x = y;
            y = mPreviewSize.getHeight() - tmp;
        } else if (270 == rotation) {
            tmp = x;
            x = mPreviewSize.getWidth() - y;
            y = tmp;
        }
        // 4. 计算取到的图像相对于裁剪区域的缩放系数，以及位移
        // 获取SCALER_CROP_REGION，也就是拍照最大像素的Rect
        Rect cropRegion = mPreviewRequestBuilder.get(CaptureRequest.SCALER_CROP_REGION);

        if (cropRegion == null) {
            Log.w(TAG, "can't get crop region");
            cropRegion = mCameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
        }
        int cropWidth = cropRegion.width();
        int cropHeight = cropRegion.height();
        //计算出摄像头剪裁区域偏移量
        if (mPreviewSize.getHeight() * cropWidth > mPreviewSize.getWidth() * cropHeight) {
            imgScale = cropHeight * 1.0 / mPreviewSize.getHeight();
            verticalOffset = 0;
            horizontalOffset = (cropWidth - imgScale * mPreviewSize.getWidth()) / 2;
        } else {
            imgScale = cropWidth * 1.0 / mPreviewSize.getWidth();
            horizontalOffset = 0;
            verticalOffset = (cropHeight - imgScale * mPreviewSize.getHeight()) / 2;
        }
        // 5. 将点击区域相对于图像的坐标，转化为相对于成像区域的坐标
        x = x * imgScale + horizontalOffset + cropRegion.left;
        y = y * imgScale + verticalOffset + cropRegion.top;
        double tapAreaRatio = 0.1;
        // 返回最终对焦区域Rect
        Rect rect = new Rect();
        rect.left = clamp((int) (x - tapAreaRatio / 2 * cropRegion.width()), 0, cropRegion.width());
        rect.right = clamp((int) (x + tapAreaRatio / 2 * cropRegion.width()), 0, cropRegion.width());
        rect.top = clamp((int) (y - tapAreaRatio / 2 * cropRegion.height()), 0, cropRegion.height());
        rect.bottom = clamp((int) (y + tapAreaRatio / 2 * cropRegion.height()), 0, cropRegion.height());
        // 6. 设置 AF、AE 的测光区域，即上述得到的 rect
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_REGIONS, new MeteringRectangle[]{new MeteringRectangle(rect, 1000)});
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_REGIONS, new MeteringRectangle[]{new MeteringRectangle(rect, 1000)});
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_AUTO);
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER, CameraMetadata.CONTROL_AF_TRIGGER_START);
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER, CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_START);
        try {
            // 7. 发送上述设置的对焦请求，并监听回调
            mCaptureSession.capture(mPreviewRequestBuilder.build(), mAfCaptureCallback, mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    private CameraCaptureSession.CaptureCallback mAfCaptureCallback = new CameraCaptureSession.CaptureCallback() {
        private void process(CaptureResult result) {
            Integer state = result.get(CaptureResult.CONTROL_AF_STATE);
            if (null == state) {
                return;
            }
            Log.d(TAG, "process: CONTROL_AF_STATE: " + state);
            if (state == CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED || state == CaptureResult
                    .CONTROL_AF_STATE_NOT_FOCUSED_LOCKED) {
                Log.d(TAG, "process: start normal preview");
                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER, CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);//撤销对焦
                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.FLASH_MODE_OFF);
                startPreview();
            }
        }

        @Override
        public void onCaptureProgressed(@NonNull CameraCaptureSession session,
                                        @NonNull CaptureRequest request,
                                        @NonNull CaptureResult partialResult) {
            process(partialResult);
        }

        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session,
                                       @NonNull CaptureRequest request,
                                       @NonNull TotalCaptureResult result) {
            process(result);
        }
    };


    private int clamp(int x, int min, int max) {
        if (x > max) return max;
        if (x < min) return min;
        return x;
    }

    public void startPreview() {
        Log.v(TAG, "startPreview");
        if (mCaptureSession == null || mPreviewRequestBuilder == null) {
            Log.w(TAG, "startPreview: mCaptureSession or mPreviewRequestBuilder is null");
            return;
        }
        try {
            // 开始预览，即一直发送预览的请求
            mCaptureSession.setRepeatingRequest(mPreviewRequest, null, mBackgroundHandler);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    public void stopPreview() {
        Log.v(TAG, "stopPreview");
        if (mCaptureSession == null || mPreviewRequestBuilder == null) {
            Log.w(TAG, "stopPreview: mCaptureSession or mPreviewRequestBuilder is null");
            return;
        }
        try {
            mCaptureSession.stopRepeating();
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    /*================手动曝光===================*/

    /**
     * 设置ISO敏感度
     *
     * @param iso
     */
    public void setIsoChange(int iso) {
        if (isoRange != null) {
            int max = isoRange.getUpper();
            int min = isoRange.getLower();
            Log.d(TAG, "isoRange: [" + max + "," + min + "]");
            if (iso > max) {
                mIsoValue = max;
            } else if (iso < min) {
                mIsoValue = min;
            } else {
                mIsoValue = iso;
            }

            focusSunView.setExposureLimit(max * 1f, min * 1f);
/*            //由于需要控制曝光，所以以上无效了。需要把CONTROL_AE_MODE设置为OFF
           mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_OFF); //关闭自动曝光*/
            //调整AE时,其他3A效果应该被禁止
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CaptureRequest.CONTROL_MODE_OFF);
            //设置每秒30帧
            Range<Integer> fps[] = mCameraCharacteristics.get(CameraCharacteristics.CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES);
            Log.d(TAG, "FPS: " + Arrays.toString(fps));
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE, fps[fps.length - 1]);
            mPreviewRequestBuilder.set(CaptureRequest.SENSOR_SENSITIVITY, mIsoValue);
            mPreviewRequestBuilder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, mExpTimeValue);
            mPreviewRequest = mPreviewRequestBuilder.build();
            startPreview();

        } else {
            Log.d(TAG, "isoRange:null ");
        }
    }

    /**
     * 设置曝光时间
     *
     * @param expTime
     */
    public void setExposureChange(long expTime) {
        if (expTimeRange != null) {
            Long max = expTimeRange.getUpper();
            Long min = expTimeRange.getLower();
            if (expTime > max) {
                mExpTimeValue = max;
            } else if (expTime < min) {
                mExpTimeValue = min;
            } else {
                mExpTimeValue = expTime;
            }
            //调整AE时,其他3A效果应该被禁止
            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CaptureRequest.CONTROL_MODE_OFF);

            mPreviewRequestBuilder.set(CaptureRequest.SENSOR_SENSITIVITY, mIsoValue);
            mPreviewRequestBuilder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, mExpTimeValue);
            Log.d(TAG, "expTime " + mExpTimeValue + "ISO " + mIsoValue);
            Log.d(TAG, "expTime: max " + max + " min:" + min);
            mPreviewRequest = mPreviewRequestBuilder.build();
            startPreview();

        }
    }


    /**
     * Saves a JPEG {@link Image} into the specified {@link File}.
     */
    private static class ImageSaver implements Runnable {

        private final Image mImage;
        private final File mFile;

        ImageSaver(Image image, File file) {
            mImage = image;
            mFile = file;
        }

        @Override
        public void run() {
            ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            FileOutputStream output = null;
            try {
                output = new FileOutputStream(mFile);
                output.write(bytes);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                mImage.close();
                if (null != output) {
                    try {
                        output.close();
                    } catch (IOException e) {

                        e.printStackTrace();
                    }
                }
            }
        }

    }

    /**
     * Compares two {@code Size}s based on their areas.
     */
    static class CompareSizesByArea implements Comparator<Size> {

        @Override
        public int compare(Size lhs, Size rhs) {
            // We cast here to ensure the multiplications won't overflow
            return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
                    (long) rhs.getWidth() * rhs.getHeight());
        }

    }

    /**
     * Shows an error message dialog.
     */
    public static class ErrorDialog extends DialogFragment {

        private static final String ARG_MESSAGE = "message";

        public static ErrorDialog newInstance(String message) {
            ErrorDialog dialog = new ErrorDialog();
            Bundle args = new Bundle();
            args.putString(ARG_MESSAGE, message);
            dialog.setArguments(args);
            return dialog;
        }

        @NonNull
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            final Activity activity = getActivity();
            return new AlertDialog.Builder(activity)
                    .setMessage(getArguments().getString(ARG_MESSAGE))
                    .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                            activity.finish();
                        }
                    })
                    .create();
        }

    }

    private void showToast(final String text) {
        final Activity activity = getActivity();
        if (activity != null) {
            activity.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(activity, text, Toast.LENGTH_SHORT).show();
                }
            });
        }
    }

    /**
     * Shows OK/Cancel confirmation dialog about camera permission.
     */
    public static class ConfirmationDialog extends DialogFragment {

        @NonNull
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            final Fragment parent = getParentFragment();
            return new AlertDialog.Builder(getActivity())
                    .setMessage(R.string.request_permission)
                    .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            parent.requestPermissions(new String[]{Manifest.permission.CAMERA},
                                    REQUEST_CAMERA_PERMISSION);
                        }
                    })
                    .setNegativeButton(android.R.string.cancel,
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    Activity activity = parent.getActivity();
                                    if (activity != null) {
                                        activity.finish();
                                    }
                                }
                            })
                    .create();
        }
    }
}
